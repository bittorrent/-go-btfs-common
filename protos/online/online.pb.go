// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/online/online.proto

package online

import (
	context "context"
	fmt "fmt"
	node "github.com/bittorrent/go-btfs-common/protos/node"
	_ "github.com/bittorrent/protobuf/gogoproto"
	proto "github.com/bittorrent/protobuf/proto"
	github_com_bittorrent_protobuf_types "github.com/bittorrent/protobuf/types"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResponseCode int32

const (
	ResponseCode_SUCCESS                ResponseCode = 0
	ResponseCode_SIGNATURE_FORMAT_ERROR ResponseCode = 1
	ResponseCode_COMPUTE_ADDRESS_ERROR  ResponseCode = 2
	ResponseCode_TIMEOUT_ERROR          ResponseCode = 3
	ResponseCode_OTHER_ERROR            ResponseCode = 20
)

var ResponseCode_name = map[int32]string{
	0:  "SUCCESS",
	1:  "SIGNATURE_FORMAT_ERROR",
	2:  "COMPUTE_ADDRESS_ERROR",
	3:  "TIMEOUT_ERROR",
	20: "OTHER_ERROR",
}

var ResponseCode_value = map[string]int32{
	"SUCCESS":                0,
	"SIGNATURE_FORMAT_ERROR": 1,
	"COMPUTE_ADDRESS_ERROR":  2,
	"TIMEOUT_ERROR":          3,
	"OTHER_ERROR":            20,
}

func (x ResponseCode) String() string {
	return proto.EnumName(ResponseCode_name, int32(x))
}

func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee5923c3111b600a, []int{0}
}

type ReqLastDailySignedInfo struct {
	PeerId               string   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty" pg:"peer_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ReqLastDailySignedInfo) Reset()         { *m = ReqLastDailySignedInfo{} }
func (m *ReqLastDailySignedInfo) String() string { return proto.CompactTextString(m) }
func (*ReqLastDailySignedInfo) ProtoMessage()    {}
func (*ReqLastDailySignedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee5923c3111b600a, []int{0}
}
func (m *ReqLastDailySignedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqLastDailySignedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqLastDailySignedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqLastDailySignedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqLastDailySignedInfo.Merge(m, src)
}
func (m *ReqLastDailySignedInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqLastDailySignedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqLastDailySignedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqLastDailySignedInfo proto.InternalMessageInfo

func (m *ReqLastDailySignedInfo) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (*ReqLastDailySignedInfo) XXX_MessageName() string {
	return "online.ReqLastDailySignedInfo"
}

type Result struct {
	Code                 ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=online.ResponseCode" json:"code,omitempty" pg:"code"`
	Message              string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	ResponseTime         time.Time    `protobuf:"bytes,3,opt,name=response_time,json=responseTime,proto3,stdtime" json:"response_time" pg:"response_time"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" pg:"-"`
	XXX_unrecognized     []byte       `json:"-" pg:"-"`
	XXX_sizecache        int32        `json:"-" pg:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee5923c3111b600a, []int{1}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() ResponseCode {
	if m != nil {
		return m.Code
	}
	return ResponseCode_SUCCESS
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Result) GetResponseTime() time.Time {
	if m != nil {
		return m.ResponseTime
	}
	return time.Time{}
}

func (*Result) XXX_MessageName() string {
	return "online.Result"
}

type ReqSignMetrics struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" pg:"public_key"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty" pg:"payload"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ReqSignMetrics) Reset()         { *m = ReqSignMetrics{} }
func (m *ReqSignMetrics) String() string { return proto.CompactTextString(m) }
func (*ReqSignMetrics) ProtoMessage()    {}
func (*ReqSignMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee5923c3111b600a, []int{2}
}
func (m *ReqSignMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSignMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSignMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSignMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSignMetrics.Merge(m, src)
}
func (m *ReqSignMetrics) XXX_Size() int {
	return m.Size()
}
func (m *ReqSignMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSignMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSignMetrics proto.InternalMessageInfo

func (m *ReqSignMetrics) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *ReqSignMetrics) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ReqSignMetrics) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (*ReqSignMetrics) XXX_MessageName() string {
	return "online.ReqSignMetrics"
}

type PayLoadInfo struct {
	NodeId               string      `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" pg:"node_id"`
	Node                 *node.Node  `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty" pg:"node"`
	LastSignedInfo       *SignedInfo `protobuf:"bytes,3,opt,name=last_signed_info,json=lastSignedInfo,proto3" json:"last_signed_info,omitempty" pg:"last_signed_info"`
	LastSignature        string      `protobuf:"bytes,4,opt,name=last_signature,json=lastSignature,proto3" json:"last_signature,omitempty" pg:"last_signature"`
	LastTime             time.Time   `protobuf:"bytes,5,opt,name=last_time,json=lastTime,proto3,stdtime" json:"last_time" pg:"last_time"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" pg:"-"`
	XXX_unrecognized     []byte      `json:"-" pg:"-"`
	XXX_sizecache        int32       `json:"-" pg:"-"`
}

func (m *PayLoadInfo) Reset()         { *m = PayLoadInfo{} }
func (m *PayLoadInfo) String() string { return proto.CompactTextString(m) }
func (*PayLoadInfo) ProtoMessage()    {}
func (*PayLoadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee5923c3111b600a, []int{3}
}
func (m *PayLoadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLoadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLoadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayLoadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLoadInfo.Merge(m, src)
}
func (m *PayLoadInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayLoadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLoadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayLoadInfo proto.InternalMessageInfo

func (m *PayLoadInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *PayLoadInfo) GetNode() *node.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *PayLoadInfo) GetLastSignedInfo() *SignedInfo {
	if m != nil {
		return m.LastSignedInfo
	}
	return nil
}

func (m *PayLoadInfo) GetLastSignature() string {
	if m != nil {
		return m.LastSignature
	}
	return ""
}

func (m *PayLoadInfo) GetLastTime() time.Time {
	if m != nil {
		return m.LastTime
	}
	return time.Time{}
}

func (*PayLoadInfo) XXX_MessageName() string {
	return "online.PayLoadInfo"
}

type RespSignMetrics struct {
	Code                 ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=online.ResponseCode" json:"code,omitempty" pg:"code"`
	Message              string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	SignedInfo           *SignedInfo  `protobuf:"bytes,3,opt,name=signed_info,json=signedInfo,proto3" json:"signed_info,omitempty" pg:"signed_info"`
	Signature            string       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" pg:"-"`
	XXX_unrecognized     []byte       `json:"-" pg:"-"`
	XXX_sizecache        int32        `json:"-" pg:"-"`
}

func (m *RespSignMetrics) Reset()         { *m = RespSignMetrics{} }
func (m *RespSignMetrics) String() string { return proto.CompactTextString(m) }
func (*RespSignMetrics) ProtoMessage()    {}
func (*RespSignMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee5923c3111b600a, []int{4}
}
func (m *RespSignMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespSignMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespSignMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespSignMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespSignMetrics.Merge(m, src)
}
func (m *RespSignMetrics) XXX_Size() int {
	return m.Size()
}
func (m *RespSignMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_RespSignMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_RespSignMetrics proto.InternalMessageInfo

func (m *RespSignMetrics) GetCode() ResponseCode {
	if m != nil {
		return m.Code
	}
	return ResponseCode_SUCCESS
}

func (m *RespSignMetrics) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RespSignMetrics) GetSignedInfo() *SignedInfo {
	if m != nil {
		return m.SignedInfo
	}
	return nil
}

func (m *RespSignMetrics) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (*RespSignMetrics) XXX_MessageName() string {
	return "online.RespSignMetrics"
}

type SignedInfo struct {
	Peer                 string   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty" pg:"peer"`
	CreatedTime          uint32   `protobuf:"varint,2,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty" pg:"created_time"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" pg:"version"`
	Nonce                uint32   `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty" pg:"nonce"`
	BttcAddress          string   `protobuf:"bytes,5,opt,name=bttc_address,json=bttcAddress,proto3" json:"bttc_address,omitempty" pg:"bttc_address"`
	SignedTime           uint32   `protobuf:"varint,6,opt,name=signed_time,json=signedTime,proto3" json:"signed_time,omitempty" pg:"signed_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *SignedInfo) Reset()         { *m = SignedInfo{} }
func (m *SignedInfo) String() string { return proto.CompactTextString(m) }
func (*SignedInfo) ProtoMessage()    {}
func (*SignedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee5923c3111b600a, []int{5}
}
func (m *SignedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedInfo.Merge(m, src)
}
func (m *SignedInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignedInfo proto.InternalMessageInfo

func (m *SignedInfo) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *SignedInfo) GetCreatedTime() uint32 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *SignedInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SignedInfo) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SignedInfo) GetBttcAddress() string {
	if m != nil {
		return m.BttcAddress
	}
	return ""
}

func (m *SignedInfo) GetSignedTime() uint32 {
	if m != nil {
		return m.SignedTime
	}
	return 0
}

func (*SignedInfo) XXX_MessageName() string {
	return "online.SignedInfo"
}
func init() {
	proto.RegisterEnum("online.ResponseCode", ResponseCode_name, ResponseCode_value)
	golang_proto.RegisterEnum("online.ResponseCode", ResponseCode_name, ResponseCode_value)
	proto.RegisterType((*ReqLastDailySignedInfo)(nil), "online.ReqLastDailySignedInfo")
	golang_proto.RegisterType((*ReqLastDailySignedInfo)(nil), "online.ReqLastDailySignedInfo")
	proto.RegisterType((*Result)(nil), "online.Result")
	golang_proto.RegisterType((*Result)(nil), "online.Result")
	proto.RegisterType((*ReqSignMetrics)(nil), "online.ReqSignMetrics")
	golang_proto.RegisterType((*ReqSignMetrics)(nil), "online.ReqSignMetrics")
	proto.RegisterType((*PayLoadInfo)(nil), "online.PayLoadInfo")
	golang_proto.RegisterType((*PayLoadInfo)(nil), "online.PayLoadInfo")
	proto.RegisterType((*RespSignMetrics)(nil), "online.RespSignMetrics")
	golang_proto.RegisterType((*RespSignMetrics)(nil), "online.RespSignMetrics")
	proto.RegisterType((*SignedInfo)(nil), "online.SignedInfo")
	golang_proto.RegisterType((*SignedInfo)(nil), "online.SignedInfo")
}

func init() { proto.RegisterFile("protos/online/online.proto", fileDescriptor_ee5923c3111b600a) }
func init() { golang_proto.RegisterFile("protos/online/online.proto", fileDescriptor_ee5923c3111b600a) }

var fileDescriptor_ee5923c3111b600a = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6f, 0xe2, 0x46,
	0x14, 0xcf, 0x24, 0x84, 0x84, 0x67, 0x20, 0xc9, 0x34, 0x25, 0x14, 0xb5, 0x26, 0x45, 0xaa, 0x14,
	0x55, 0x8a, 0x51, 0xc9, 0xb1, 0xad, 0x2a, 0x02, 0x34, 0x45, 0x0d, 0x81, 0x8e, 0xe1, 0xd2, 0x8b,
	0x65, 0xec, 0xc1, 0xb5, 0x0a, 0x1e, 0xc7, 0x33, 0x44, 0xe2, 0x5b, 0xf4, 0xd6, 0xfd, 0x08, 0xfb,
	0x0d, 0xf6, 0xba, 0xc7, 0x1c, 0xf7, 0x13, 0xec, 0xae, 0x92, 0xc3, 0xde, 0xf6, 0x33, 0xac, 0x66,
	0x6c, 0x07, 0xaf, 0x94, 0x48, 0xbb, 0xd2, 0x5e, 0x60, 0xde, 0x9b, 0xf7, 0xde, 0xfc, 0xfe, 0x78,
	0x06, 0x6a, 0x61, 0xc4, 0x04, 0xe3, 0x4d, 0x16, 0xcc, 0xfd, 0x80, 0x26, 0x7f, 0x86, 0x4a, 0xe2,
	0x7c, 0x1c, 0xd5, 0x7e, 0xf6, 0x7c, 0xf1, 0xcf, 0x72, 0x6a, 0x38, 0x6c, 0xd1, 0x9c, 0xfa, 0x42,
	0xb0, 0x28, 0xa2, 0x81, 0x68, 0x7a, 0xec, 0x74, 0x2a, 0x66, 0xfc, 0xd4, 0x61, 0x8b, 0x05, 0x0b,
	0x9a, 0xc9, 0xa0, 0x80, 0xb9, 0x54, 0xfd, 0xc4, 0x43, 0x6a, 0x67, 0x8f, 0x37, 0xab, 0xcd, 0xe9,
	0x72, 0xd6, 0xf4, 0x98, 0xc7, 0x54, 0xa0, 0x56, 0x49, 0x53, 0xdd, 0x63, 0xcc, 0x9b, 0xd3, 0x75,
	0x95, 0xf0, 0x17, 0x94, 0x0b, 0x7b, 0x11, 0xc6, 0x05, 0x8d, 0x9f, 0xa0, 0x42, 0xe8, 0xf5, 0xa5,
	0xcd, 0x45, 0xd7, 0xf6, 0xe7, 0x2b, 0xd3, 0xf7, 0x02, 0xea, 0xf6, 0x83, 0x19, 0xc3, 0x47, 0xb0,
	0x13, 0x52, 0x1a, 0x59, 0xbe, 0x5b, 0x45, 0xc7, 0xe8, 0xa4, 0x40, 0xf2, 0x32, 0xec, 0xbb, 0x8d,
	0xff, 0x11, 0xe4, 0x09, 0xe5, 0xcb, 0xb9, 0xc0, 0x27, 0x90, 0x73, 0x98, 0x4b, 0x55, 0x41, 0xb9,
	0x75, 0x68, 0x24, 0xac, 0x09, 0xe5, 0x21, 0x0b, 0x38, 0xed, 0x30, 0x97, 0x12, 0x55, 0x81, 0xab,
	0xb0, 0xb3, 0xa0, 0x9c, 0xdb, 0x1e, 0xad, 0x6e, 0xaa, 0x69, 0x69, 0x88, 0xfb, 0x50, 0x8a, 0x92,
	0x7a, 0x4b, 0xa2, 0xab, 0x6e, 0x1d, 0xa3, 0x13, 0xad, 0x55, 0x33, 0x62, 0xe8, 0x46, 0x0a, 0xdd,
	0x18, 0xa7, 0xd0, 0xcf, 0x77, 0x6f, 0x5f, 0xd7, 0x37, 0xfe, 0x7b, 0x53, 0x47, 0xa4, 0x98, 0xb6,
	0xca, 0xcd, 0x86, 0x07, 0x65, 0x42, 0xaf, 0x25, 0x87, 0x01, 0x15, 0x91, 0xef, 0x70, 0xfc, 0x1d,
	0x40, 0xb8, 0x9c, 0xce, 0x7d, 0xc7, 0xfa, 0x97, 0xae, 0x14, 0xcc, 0x22, 0x29, 0xc4, 0x99, 0x3f,
	0xe9, 0x0a, 0x7f, 0x0b, 0x05, 0xee, 0x7b, 0x81, 0x2d, 0x96, 0x51, 0x8c, 0xab, 0x48, 0xd6, 0x09,
	0x89, 0x39, 0xb4, 0x57, 0x73, 0x66, 0xbb, 0x0a, 0x53, 0x91, 0xa4, 0x61, 0xe3, 0x3d, 0x02, 0x6d,
	0x64, 0xaf, 0x2e, 0x99, 0xfd, 0xa0, 0x95, 0x74, 0x2a, 0xa3, 0x95, 0x0c, 0xfb, 0x2e, 0xd6, 0x21,
	0x27, 0x57, 0x6a, 0xb6, 0xd6, 0x02, 0x43, 0xf9, 0x79, 0xa5, 0x64, 0x91, 0x4b, 0xfc, 0x0b, 0xec,
	0xcf, 0x6d, 0x2e, 0x2c, 0xae, 0x74, 0xb7, 0xfc, 0x60, 0xc6, 0x12, 0xfe, 0x38, 0x15, 0x73, 0x6d,
	0x09, 0x29, 0xcb, 0xda, 0x8c, 0x45, 0x3f, 0x40, 0xf9, 0xa1, 0x3b, 0xe6, 0x90, 0x53, 0xa7, 0x97,
	0xd2, 0xba, 0x98, 0x47, 0x1b, 0x0a, 0xaa, 0x4c, 0xa9, 0xbb, 0xfd, 0x19, 0xea, 0xee, 0xca, 0x36,
	0xa5, 0xec, 0x73, 0x04, 0x7b, 0xd2, 0xd5, 0xac, 0xb6, 0x5f, 0xc2, 0xfc, 0x33, 0xd0, 0x3e, 0x8d,
	0x3a, 0xf0, 0x35, 0xed, 0x8f, 0x5c, 0x8b, 0x19, 0xaf, 0x13, 0x8d, 0x17, 0x08, 0x20, 0xa3, 0x11,
	0x86, 0x9c, 0xfc, 0x6e, 0x13, 0x5f, 0xd4, 0x1a, 0x7f, 0x0f, 0x45, 0x27, 0xa2, 0xb6, 0xa0, 0x6e,
	0xac, 0x89, 0x04, 0x55, 0x22, 0x5a, 0x92, 0x93, 0x84, 0x25, 0xe4, 0x1b, 0x1a, 0x71, 0x9f, 0x05,
	0x0a, 0x54, 0x81, 0xa4, 0x21, 0x3e, 0x84, 0xed, 0x80, 0x05, 0x4e, 0x7c, 0x72, 0x89, 0xc4, 0x81,
	0x1c, 0x39, 0x15, 0xc2, 0xb1, 0x6c, 0xd7, 0x8d, 0x28, 0xe7, 0x4a, 0xe6, 0x02, 0xd1, 0x64, 0xae,
	0x1d, 0xa7, 0x70, 0xfd, 0x81, 0xab, 0x3a, 0x34, 0xaf, 0xda, 0x13, 0x5e, 0xf2, 0xcc, 0x1f, 0x6f,
	0xa0, 0x98, 0x15, 0x0f, 0x6b, 0xb0, 0x63, 0x4e, 0x3a, 0x9d, 0x9e, 0x69, 0xee, 0x6f, 0xe0, 0x1a,
	0x54, 0xcc, 0xfe, 0xc5, 0x55, 0x7b, 0x3c, 0x21, 0x3d, 0xeb, 0xf7, 0x21, 0x19, 0xb4, 0xc7, 0x56,
	0x8f, 0x90, 0x21, 0xd9, 0x47, 0xf8, 0x1b, 0xf8, 0xba, 0x33, 0x1c, 0x8c, 0x26, 0xe3, 0x9e, 0xd5,
	0xee, 0x76, 0x49, 0xcf, 0x34, 0x93, 0xad, 0x4d, 0x7c, 0x00, 0xa5, 0x71, 0x7f, 0xd0, 0x1b, 0x4e,
	0xd2, 0xea, 0x2d, 0xbc, 0x07, 0xda, 0x70, 0xfc, 0x47, 0x8f, 0x24, 0x89, 0xc3, 0xd6, 0x3b, 0x04,
	0xa5, 0xa1, 0x52, 0xdc, 0xa4, 0xd1, 0x8d, 0xef, 0x50, 0xdc, 0x85, 0x83, 0x49, 0xe8, 0xda, 0x82,
	0x66, 0xfd, 0xae, 0xac, 0x1d, 0xce, 0xde, 0xb1, 0xda, 0x51, 0xd6, 0xf9, 0x6c, 0xc3, 0xaf, 0xf0,
	0x55, 0x97, 0xc5, 0xcf, 0x8a, 0xb0, 0xc5, 0x92, 0x13, 0x1a, 0xb2, 0x48, 0x3c, 0x39, 0xa7, 0x9c,
	0x99, 0x23, 0x1f, 0x97, 0xbf, 0xa0, 0x72, 0x41, 0xc5, 0x63, 0x4f, 0x93, 0x9e, 0x99, 0xf0, 0xc8,
	0xfe, 0x93, 0x88, 0xce, 0x7f, 0xbb, 0xbd, 0xd3, 0xd1, 0xab, 0x3b, 0x1d, 0xbd, 0xbd, 0xd3, 0xd1,
	0xb3, 0x7b, 0x1d, 0xbd, 0xbc, 0xd7, 0xd1, 0xed, 0xbd, 0x8e, 0xa0, 0xec, 0x33, 0x43, 0x3e, 0xc2,
	0x49, 0xe7, 0xb9, 0x16, 0x0b, 0x32, 0x92, 0xd7, 0x63, 0x84, 0xfe, 0x4e, 0x5e, 0xf0, 0x69, 0x5e,
	0xdd, 0x97, 0xb3, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xff, 0x54, 0x77, 0xee, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OnlineServiceClient is the client API for OnlineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnlineServiceClient interface {
	UpdateSignMetrics(ctx context.Context, in *ReqSignMetrics, opts ...grpc.CallOption) (*RespSignMetrics, error)
	DoDailyStatusReport(ctx context.Context, in *ReqSignMetrics, opts ...grpc.CallOption) (*Result, error)
	GetLastDailySignedInfo(ctx context.Context, in *ReqLastDailySignedInfo, opts ...grpc.CallOption) (*RespSignMetrics, error)
}

type onlineServiceClient struct {
	cc *grpc.ClientConn
}

func NewOnlineServiceClient(cc *grpc.ClientConn) OnlineServiceClient {
	return &onlineServiceClient{cc}
}

func (c *onlineServiceClient) UpdateSignMetrics(ctx context.Context, in *ReqSignMetrics, opts ...grpc.CallOption) (*RespSignMetrics, error) {
	out := new(RespSignMetrics)
	err := c.cc.Invoke(ctx, "/online.OnlineService/UpdateSignMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) DoDailyStatusReport(ctx context.Context, in *ReqSignMetrics, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/online.OnlineService/DoDailyStatusReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServiceClient) GetLastDailySignedInfo(ctx context.Context, in *ReqLastDailySignedInfo, opts ...grpc.CallOption) (*RespSignMetrics, error) {
	out := new(RespSignMetrics)
	err := c.cc.Invoke(ctx, "/online.OnlineService/GetLastDailySignedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineServiceServer is the server API for OnlineService service.
type OnlineServiceServer interface {
	UpdateSignMetrics(context.Context, *ReqSignMetrics) (*RespSignMetrics, error)
	DoDailyStatusReport(context.Context, *ReqSignMetrics) (*Result, error)
	GetLastDailySignedInfo(context.Context, *ReqLastDailySignedInfo) (*RespSignMetrics, error)
}

// UnimplementedOnlineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOnlineServiceServer struct {
}

func (*UnimplementedOnlineServiceServer) UpdateSignMetrics(ctx context.Context, req *ReqSignMetrics) (*RespSignMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSignMetrics not implemented")
}
func (*UnimplementedOnlineServiceServer) DoDailyStatusReport(ctx context.Context, req *ReqSignMetrics) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoDailyStatusReport not implemented")
}
func (*UnimplementedOnlineServiceServer) GetLastDailySignedInfo(ctx context.Context, req *ReqLastDailySignedInfo) (*RespSignMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastDailySignedInfo not implemented")
}

func RegisterOnlineServiceServer(s *grpc.Server, srv OnlineServiceServer) {
	s.RegisterService(&_OnlineService_serviceDesc, srv)
}

func _OnlineService_UpdateSignMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).UpdateSignMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online.OnlineService/UpdateSignMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).UpdateSignMetrics(ctx, req.(*ReqSignMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_DoDailyStatusReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).DoDailyStatusReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online.OnlineService/DoDailyStatusReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).DoDailyStatusReport(ctx, req.(*ReqSignMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnlineService_GetLastDailySignedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLastDailySignedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServiceServer).GetLastDailySignedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online.OnlineService/GetLastDailySignedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServiceServer).GetLastDailySignedInfo(ctx, req.(*ReqLastDailySignedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnlineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "online.OnlineService",
	HandlerType: (*OnlineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSignMetrics",
			Handler:    _OnlineService_UpdateSignMetrics_Handler,
		},
		{
			MethodName: "DoDailyStatusReport",
			Handler:    _OnlineService_DoDailyStatusReport_Handler,
		},
		{
			MethodName: "GetLastDailySignedInfo",
			Handler:    _OnlineService_GetLastDailySignedInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/online/online.proto",
}

func (m *ReqLastDailySignedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLastDailySignedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqLastDailySignedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n1, err1 := github_com_bittorrent_protobuf_types.StdTimeMarshalTo(m.ResponseTime, dAtA[i-github_com_bittorrent_protobuf_types.SizeOfStdTime(m.ResponseTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintOnline(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintOnline(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSignMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSignMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSignMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayLoadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLoadInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayLoadInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n2, err2 := github_com_bittorrent_protobuf_types.StdTimeMarshalTo(m.LastTime, dAtA[i-github_com_bittorrent_protobuf_types.SizeOfStdTime(m.LastTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintOnline(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.LastSignature) > 0 {
		i -= len(m.LastSignature)
		copy(dAtA[i:], m.LastSignature)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.LastSignature)))
		i--
		dAtA[i] = 0x22
	}
	if m.LastSignedInfo != nil {
		{
			size, err := m.LastSignedInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespSignMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespSignMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespSignMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.SignedInfo != nil {
		{
			size, err := m.SignedInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintOnline(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SignedTime != 0 {
		i = encodeVarintOnline(dAtA, i, uint64(m.SignedTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BttcAddress) > 0 {
		i -= len(m.BttcAddress)
		copy(dAtA[i:], m.BttcAddress)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.BttcAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Nonce != 0 {
		i = encodeVarintOnline(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedTime != 0 {
		i = encodeVarintOnline(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Peer) > 0 {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintOnline(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOnline(dAtA []byte, offset int, v uint64) int {
	offset -= sovOnline(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReqLastDailySignedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOnline(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	l = github_com_bittorrent_protobuf_types.SizeOfStdTime(m.ResponseTime)
	n += 1 + l + sovOnline(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSignMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLoadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovOnline(uint64(l))
	}
	if m.LastSignedInfo != nil {
		l = m.LastSignedInfo.Size()
		n += 1 + l + sovOnline(uint64(l))
	}
	l = len(m.LastSignature)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	l = github_com_bittorrent_protobuf_types.SizeOfStdTime(m.LastTime)
	n += 1 + l + sovOnline(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RespSignMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOnline(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	if m.SignedInfo != nil {
		l = m.SignedInfo.Size()
		n += 1 + l + sovOnline(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovOnline(uint64(m.CreatedTime))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovOnline(uint64(m.Nonce))
	}
	l = len(m.BttcAddress)
	if l > 0 {
		n += 1 + l + sovOnline(uint64(l))
	}
	if m.SignedTime != 0 {
		n += 1 + sovOnline(uint64(m.SignedTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOnline(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOnline(x uint64) (n int) {
	return sovOnline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqLastDailySignedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLastDailySignedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLastDailySignedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ResponseCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_bittorrent_protobuf_types.StdTimeUnmarshal(&m.ResponseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSignMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSignMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSignMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLoadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLoadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLoadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &node.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSignedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSignedInfo == nil {
				m.LastSignedInfo = &SignedInfo{}
			}
			if err := m.LastSignedInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_bittorrent_protobuf_types.StdTimeUnmarshal(&m.LastTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespSignMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespSignMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespSignMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ResponseCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignedInfo == nil {
				m.SignedInfo = &SignedInfo{}
			}
			if err := m.SignedInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BttcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BttcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedTime", wireType)
			}
			m.SignedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOnline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOnline
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOnline
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOnline
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOnline        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOnline          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOnline = fmt.Errorf("proto: unexpected end of group")
)
